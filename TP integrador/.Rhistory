xlab = "X", ylab = "Y", zlab = "Z")
persp(x, y, z, theta =10/8, phi =10/8,
expand = 0.5, col = rainbow(i),
ltheta = 120, shade = 0.75,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
{
persp(x, y, z, theta =10/8, phi =10/8,
expand = 0.8, col = rainbow(i),
ltheta = 120, shade = 0.75,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
persp(x, y, z, theta =10/8, phi =10/8,
expand = 0.2, col = rainbow(i),
ltheta = 120, shade = 0.75,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
persp(x, y, z, theta =10/8, phi =10/8,
expand = 0.4, col = rainbow(i),
ltheta = 120, shade = 0.75,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
persp(x, y, z, theta =10/8, phi =10/8,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.75,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
persp(x, y, z, theta =10/8, phi =10/8,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
persp(x, y, z, theta =10/8, phi =10/8,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55, phi = 45,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
persp(x, y, z, theta =10/8, phi =10/8,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55, phi = 30,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
persp(x, y, z, theta =10/8, phi =10/8,
expand = 0.6, col = rainbow(i),
theta = 15, shade = 0.55, phi = 15,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
persp(x, y, z, theta =10/8, phi =30,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
persp(x, y, z, theta =10/8, phi =45,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
persp(x, y, z, theta =10/8, phi =30,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
x <- seq(-3, 3, length = 20)
y <- seq(-3, 3, length = 20)
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =10/8, phi =30,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
x <- seq(-3, 3, length = 50)
y <- seq(-3, 3, length = 50)
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =10/8, phi =50,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
x <- seq(-3, 3, length = 10)
y <- seq(-3, 3, length = 10)
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =10/8, phi =50,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =10/8, phi =90,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =10/8, phi =30,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =10/8, phi =45,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =10/8, phi =15,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =15, phi =15,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =45, phi =30,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =30, phi =45,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =90, phi =15,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =15, phi =90,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =120, phi =15,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =160, phi =15,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =140, phi =15,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(sub="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
x <- seq(-2, 2, length = 20)
y <- seq(-2, 2, length = 20)
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =140, phi =15,
expand = 0.6, col = rainbow(i),
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
points(1, 1, col = "black", pch = 20)
}
contour(x, y, z, xlab = "X", ylab = "Y", nlevels= 200)
points(1, 1, col = "red", pch = 20)
contour(x, y, z, xlab = "X", ylab = "Y", nlevels= 200)
points(1, 1, col = "blue", pch = 10)
install.packages("maxLik")
library("maxLik")
library("maxLik")
maxNR(rosenbrock, c(2, 50))
library("maxLik")
maxNR(fn = rosenbrock, start = c(2, 50))
library("maxLik")
fn_r <- function(x) { (100*(x[2]-x[1]^2)^2)+(1-x[1])^2 }
maxNR(fn = rosenbrock, start = c(2, 50))
library("maxLik")
fn_r <- function(x) { (100*(x[2]-x[1]^2)^2)+(1-x[1])^2 }
maxNR(fn = -fn_r, start = c(2, 50))
library("maxLik")
fn_r <- function(x) { -(100*(x[2]-x[1]^2)^2)+(1-x[1])^2 }
maxNR(fn = fn_r, start = c(2, 50))
100*(x[2]-x[1]^2)^2+(1-x[1])^2
nlm(rosenb, c(2, 5))
rosenb <- function(x){
100*(x[2]-x[1]^2)^2+(1-x[1])^2
}
nlm(rosenb, c(2, 5))
library("maxLik")
fn_r <- function(x) { (100*(x[2]-x[1]^2)^2)+(1-x[1])^2 }
maxNR(fn = fn_r, start = c(2, 50))
library("maxLik")
fn_r <- function(x) { -(100*(x[2]-x[1]^2)^2)+(1-x[1])^2 }
maxNR(fn = fn_r, start = c(2, 50))
library("maxLik")
fn_r <- function(x) { -(100*(x[2]-x[1]^2)^2)+(1-x[1])^2 }
maxNR(fn = fn_r, start = c(2, 5))
library("maxLik")
fn_r <- function(x) { -(100*(x[2]-x[1]^2)^2)+(1-x[1])^2 }
maxNR(fn = fn_r, start = c(2, 2))
library("maxLik")
fn_r <- function(x) { -(100*(x[2]-x[1]^2)^2)+(1-x[1])^2 }
maxNR(fn = fn_r, start = c(2, 50))
fn_r <- function(x) { -((100*(x[2]-x[1]^2)^2)+(1-x[1])^2) }
maxNR(fn = fn_r, start = c(2, 50))
min <- maxNR(fn = fn_r, start = c(2, 50))
min
library("maxLik")
fn_r <- function(x) { -((100*(x[2]-x[1]^2)^2)+(1-x[1])^2) }
min <- maxNR(fn = fn_r, start = c(2, 50))
#Solamente vamos a mostrar los resultados que nos interesan
min$maximum #Mínimo al cual converge
min$estimate #Estimaciones de los valores que asumen las variables x e y en el mínimo.
min$iterations #Cantidad de iteraciones
min$coef #Estimaciones de los valores que asumen las variables x e y en el mínimo.
min$estimate #Estimaciones de los valores que asumen las variables x e y en el mínimo.
min
fn_rosen <- function(x) { -((100*(x[2]-x[1]^2)^2)+(1-x[1])^2) }
min <- maxNR(fn = fn_rosen, start = c(2, 50))
min$control
min$control$steptol
min$control
# El nivel de tolerancia para el tamaño del paso es steptol = 1e-10 y para la norma del vector gradiente es gradtol = 1e-06
min_2 <- nlm(rosenbrock, c(2,50), gradtol = 1e-06, steptol = 1e-10)
View(rosenb)
View(rosenb)
View(fn_rosen)
min$control
# El nivel de tolerancia para el tamaño del paso es steptol = 1e-10 y para la norma del vector gradiente es gradtol = 1e-06
fn_rosen_2 <- function(x) { (100*(x[2]-x[1]^2)^2)+(1-x[1])^2 }
min_2 <- nlm(fn_rosen_2, c(2,50), gradtol = 1e-06, steptol = 1e-10)
min_2
min$control
# El nivel de tolerancia para el tamaño del paso es steptol = 1e-10 y para la norma del vector gradiente es gradtol = 1e-06
fn_rosen_2 <- function(x) { (100*(x[2]-x[1]^2)^2)+(1-x[1])^2 }
min_2 <- nlm(fn_rosen_2, c(2,50), gradtol = 1e-06, steptol = 1e-10)
min_2$minimum
min_2$estimate
min_2$iterations
library("maxLik")
fn_rosen <- function(x) { -((100*(x[2]-x[1]^2)^2)+(1-x[1])^2) }
min <- maxNR(fn = fn_rosen, start = c(2, 50))
#Solamente se muestran los resultados que nos interesan
min$maximum #Mínimo al cual converge
min$estimate #Estimaciones de los valores que asumen las variables x e y en el mínimo.
min$iterations #Cantidad de iteraciones
library(lattice)
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0))
xy <- as.matrix(expand.grid(seq(-5,5, length= 101), seq(-5,5, length(101))))
colnames(xy) <- c('x', 'y')
df <- data.frame(fnxy = fn(xy), xy)
fn <- function(par){
A <-  matrix(par, ncol=2)
x <- A[,1]
y <- A[,2]
f <- (x^2+y-11)^2+(x+y^2-7)^2
return(f)
}
par <- c(1,1)
fn(par)
xy <- as.matrix(expand.grid(seq(-5,5, length= 101), seq(-5,5, length(101))))
colnames(xy) <- c('x', 'y')
df <- data.frame(fnxy = fn(xy), xy)
library(lattice)
wireframe(fnxy ~ x*y, data = df, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0))
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-40, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
}
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-140, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
}
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
}
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")    title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
}
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
}
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z", title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2"))
}
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z", title =
"f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
library(lattice)
{
wireframe(z ~ (100*(y-x^2)^2)+(1-x)^2, data = z, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z", title =
"f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z")
}
library(lattice)
{
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z", main
="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
#los valores de z que se corresponden con los pares x e y
{
persp(x, y, z, theta =140, phi =15,
expand = 0.6, col = "orange",
ltheta = 120, shade = 0.55,
ticktype = "detailed", nticks=5,
xlab = "X", ylab = "Y", zlab = "Z")
title(main = "f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
}
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos
#los valores de z que se corresponden con los pares x e y
library(lattice)
wireframe(z, data = data.frame(rosenbrock), shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z", main
="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
rosenbrock <- function(x,y) { (100*(y-x^2)^2)+(1-x)^2 }
z <- outer(x, y, rosenbrock)	#Con la función outer obtenemos
#los valores de z que se corresponden con los pares x e y
library(lattice)
wireframe(z, data = rosenbrock, shade = TRUE, drape=FALSE,
scales = list(arrows = FALSE),
screen = list(z=-240, x=-70, y=0), xlab = "X", ylab = "Y", zlab = "Z", main
="f(x,y)=(100*(y-x^2)^2)+(1-x)^2")
?maxNR()
knitr::opts_chunk$set(echo = TRUE)
min$control[:2]
min$control$tol
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
import torch
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
df = [1,2,3]
library(reticulate)
install.packages(reticulate)
install.packages(reticulate)
library(reticulate)
library(reticulate)
reticulate::repl_python()
